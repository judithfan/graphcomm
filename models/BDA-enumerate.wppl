// run using:

// webppl BDA-enumerate.wppl --require ./refModule/ -- --splitType <balancedavg1> --simScaling 2

// Load in experimental data to condition on
var experimentVersion = 'fixedPose96'; // 'fixedPose', 'varyingPose', etc
var aggregate = true;
var splitType = argv.splitType; //balancedavg1
var simScaling = argv.simScaling;

// Note that 'pool1' is just in the file name, but isn't specific to that perceptual model
var dataFilename = ['sketchData', 'fixedPose', splitType,
		    'multimodal_pool1', 'pilot2', 'costOutliersRemoved.csv'].join("_");
var dataPath = ['.', 'bdaInput', splitType, dataFilename].join("/");
var data = refModule.readCSV(dataPath);
console.log("Loading expt data complete..." + data.length + " data points");

// Cache some properties of model
// Note: when moving to model comparison, can precache for all models...
var similarities = refModule.getSimilarities(splitType);
var costs = refModule.getCosts(experimentVersion + '-cost_duration-average', splitType);
var conditionLookup = refModule.getConditionLookup(splitType);
var possibleSketches = refModule.getPossibleSketches(data, {aggregate,conditionLookup});

// Package into config
var globalConfig = {
  similarities, possibleSketches, costs, conditionLookup, aggregate,
  outputFileName : [splitType, 'sim ' + simScaling, 'enumerate'].join('_')
};

var perceptionLevels = ['multimodal_conv42', 'multimodal_pool1', 'human', 'multimodal_fc6'];
var infWeightLevels = _.range(0,8,.5).toFixed(1);
var pragWeightLevels = _.range(0,1.01,0.05).toFixed(2);
var costWeightLevels = _.range(0,8.01,0.5).toFixed(2);

// write header at beginning
var filename = './enumerateOutput/' + globalConfig.outputFileName;
refModule.writeRow(filename, 'perception,infWeight,simScaling,pragWeight,costWeight,loglikelihood');

// Kind of silly way to write out every sample...
foreach(perceptionLevels, function(perception) {
  foreach(infWeightLevels, function(infWeight) {
    foreach(pragWeightLevels, function(pragWeight) {
      foreach(costWeightLevels, function(costWeight) {
	var params = {
	  perception : perception,
	  infWeight: infWeight,
	  simScaling : simScaling,
	  pragWeight: pragWeight,
	  costWeight : costWeight
	};	

	var score = reduce(function(c, memo) {
	  // Extract condition information
	  var conditionType = c.condition;
	  var context = [c.Target, c.Distractor1, c.Distractor2, c.Distractor3];
	  var modelOutput = speakerModel(c.Target, context, params, globalConfig);
	  var sketchInfo = globalConfig.aggregate ? c.coarseGrainedSketchInfo : c.sketchLabel;
	  return memo + modelOutput.score(sketchInfo);
	}, 0, data);	

	refModule.appendRow(filename, _.values(params).concat(score).join(','));
      });
    });
  });
});
