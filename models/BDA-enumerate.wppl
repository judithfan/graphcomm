// run using:

// webppl BDA-enumerate.wppl --require ./refModule/ -- --perception multimodal_full25k --pragmatics combined --production cost

// Load in experimental data to condition on
var experimentVersion = 'fixedPose96'; // 'fixedPose', 'varyingPose', etc
var splitType = 'splitbyobject';
var data = refModule.readCSV('./bdaInput/sketchData_fixedPose_' + splitType + '_' + argv.perception + '_pilot2_costOutliersRemoved.csv');

console.log("Loading expt data complete..." + data.length + " data points");

// Cache some properties of model
// Note: when moving to model comparison, can precache for all models...
var similarities = refModule.getSimilarities();
var costs = refModule.getCosts(experimentVersion + '-drawDuration');
var possibleSketches = refModule.getPossibleSketches(data);
var conditionLookup = refModule.getConditionLookup();
console.log("Loading model data complete..."
	    + possibleSketches.length + " sketches of " +
	    + _.keys(similarities['sketch_avg_full25k']).length + " objects." );

// Package into config
var globalConfig = {
  similarities, possibleSketches, costs, conditionLookup,
  aggregate: true,
  outputFileName : argv.perception + '_' + argv.pragmatics + '_' + argv.production + '_enumerate' 
};

var paramPrior = function() {
  var perception = argv.perception; // human, fc6, sketch_average_full25k
  var pragmatics = argv.pragmatics; // S0, S1, combined
  var production = argv.production; // cost, nocost
  var infWeight  = uniformDraw(_.range(0,8,.5));//uniformDrift({a:0,b:10,width:0.1}) 
  console.log('inf: ' + infWeight); 
  var simScaling = uniformDraw(_.range(0,20,.5));//{a:0,b:30,width:1})),
  console.log('sim: ' + simScaling);
  var pragWeight = uniformDraw(_.range(0,1.01,0.05));//uniformDrift({a:0,b:1,width:0.1})),
  console.log('prag: ' + pragWeight);
  return {
    pragmatics, production,
    perception : uniformDraw(['multimodal_full25k', 'human_full25k']),
    infWeight: infWeight,
    simScaling : simScaling,
    pragWeight: pragWeight,
    costWeight : uniformDraw(_.range(0,8.01,0.5))//{a:0,b:10,width:0.1})),
  };
};

var modelAnalysis = function() {
  var params = paramPrior();
  var score = reduce(function(c, memo) {
    // Extract condition information
    var conditionType = c.condition;
    var context = [c.Target, c.Distractor1, c.Distractor2, c.Distractor3];
    var target = context[0];
    var sketchInfo = globalConfig.aggregate ? c.coarseGrainedSketchInfo : c.sketchLabel;
    return memo + refModule.getSpeakerScore(
      c.sketchLabel, target, context, params, globalConfig
    );
  }, 0, data);

  factor(score);

  var paramsKey = _.values(_.omit(params, ['pragmatics', 'production'])).join(',');
  return {
    params : _.zipObject([paramsKey], [score.toFixed(2)])
  };
};

// var outputERP = Infer({method: 'MCMC', samples: 1000, burn: 250, lag: 0, model: modelAnalysis, onlyMAP: false});
var outputERP = Infer({method: 'enumerate', model: modelAnalysis});
refModule.bayesianErpWriter(outputERP, "./bdaOutput/" + globalConfig.outputFileName);
