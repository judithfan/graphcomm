// run using:

// webppl BDA-enumerate.wppl --require ./refModule/ -- --splitType <balancedavg1> --simScaling 2

// Load in experimental data to condition on
var experimentVersion = 'fixedPose96'; // 'fixedPose', 'varyingPose', etc
var splitType = argv.splitType; //balancedavg1
var simScaling = argv.simScaling;

// Note that 'pool1' is just in the file name, but isn't specific to that perceptual model
var dataFilename = ['sketchData', 'fixedPose', splitType,
		    'multimodal_pool1', 'pilot2', 'costOutliersRemoved.csv'].join("_");
var dataPath = ['.', 'bdaInput', splitType, dataFilename].join("/");
var data = refModule.readCSV(dataPath);
console.log("Loading expt data complete..." + data.length + " data points");

// Cache some properties of model
// Note: when moving to model comparison, can precache for all models...
var similarities = refModule.getSimilarities(splitType);
var costs = refModule.getCosts(experimentVersion + '-drawDuration');
var possibleSketches = refModule.getPossibleSketches(data);
var conditionLookup = refModule.getConditionLookup();

// Package into config
var globalConfig = {
  similarities, possibleSketches, costs, conditionLookup,
  aggregate: true,
  outputFileName : [splitType, 'sim ' + simScaling, 'enumerate'].join('_')
};

var paramPrior = function() {
  var perception = uniformDraw(['human', 'multimodal_fc6', 'multimodal_conv42', 'multimodal_pool1']);
  console.log('perception: ' + perception);
  var infWeight  = uniformDraw(_.range(0,8,.5)).toFixed(1);//uniformDrift({a:0,b:10,width:0.1}) 
  console.log('inf: ' + infWeight); 
  var pragWeight = uniformDraw(_.range(0,1.01,0.05)).toFixed(3);//uniformDrift({a:0,b:1,width:0.1})),
  console.log('prag: ' + pragWeight);
  return {
    perception : perception,
    infWeight: infWeight,
    simScaling : simScaling,
    pragWeight: pragWeight,
    costWeight : uniformDraw(_.range(0,8.01,0.5)).toFixed(2)//{a:0,b:10,width:0.1})),
  };
};

var modelAnalysis = function() {
  var params = paramPrior();
  var score = reduce(function(c, memo) {
    // Extract condition information
    var conditionType = c.condition;
    var context = [c.Target, c.Distractor1, c.Distractor2, c.Distractor3];
    var target = context[0];
    var sketchInfo = globalConfig.aggregate ? c.coarseGrainedSketchInfo : c.sketchLabel;
    return memo + refModule.getSpeakerScore(
      c.sketchLabel, target, context, params, globalConfig
    );
  }, 0, data);

  factor(score);

  var paramsKey = _.values(params).join(',');
  return {
    params : _.zipObject([paramsKey], [score.toFixed(2)])
  };
};

// var outputERP = Infer({method: 'MCMC', samples: 1000, burn: 250, lag: 0, model: modelAnalysis, onlyMAP: false});
var outputERP = Infer({method: 'enumerate', model: modelAnalysis});
refModule.bayesianErpWriter(outputERP, "./bdaOutput/" + globalConfig.outputFileName);
