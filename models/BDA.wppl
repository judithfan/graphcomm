// run using:
// webppl BDA.wppl --require ./refModule/

// Load in experimental data to condition on
var experimentVersion = 'fixedPose96'; // 'fixedPose', 'varyingPose', etc
var data = refModule.readCSV('./bdaInput/sketchData_fixedPose_splitbycontext_augmented2_pilot2.csv');
console.log("Loading expt data complete..." + data.length + " data points");

// Cache some properties of model
// Note: when moving to model comparison, can precache for all models...
var similarities = refModule.getSimilarities();
var costs = refModule.getCosts(experimentVersion);
var possibleSketches = refModule.getPossibleSketches(data);
var conditionLookup = refModule.getConditionLookup();
console.log("Loading model data complete..."
	    + possibleSketches.length + " sketches of " +
	    + _.keys(similarities['strict']).length + " objects." );

// Package into config
var globalConfig = {
  similarities, possibleSketches, costs, conditionLookup,
  outputFileName : 'S0_vs_S1'
};

var paramPrior = function() {
  var perception = uniformDraw(['mid-layer']);
  var pragmatics = uniformDraw(['S0', 'S1'])//, 'S0', 'combined']);
  var production = uniformDraw(['cost'])//cost', 'nocost']);  
  return {
    perception, pragmatics, production,
    alpha : uniformDraw(_.range(0.5, 10, 1)),
    simScaling : (pragmatics === 'S0' ? 1 :
		  uniformDraw(_.range(0.0, 5, 0.5))),    
    pragWeight: (pragmatics == 'S0' ? 0 :
		 pragmatics == 'S1' ? 1 :
		 uniformDraw(_.range(0, 1.01, 0.1))),
    costWeight : (production === 'nocost' ? 0 :
		  uniformDraw(_.range(0, 1.01, 0.1)))
  };
};

var modelAnalysis = function() {

  var params = paramPrior();
  var score = reduce(function(c, memo) {
    // Extract condition information
    var conditionType = c.condition;
    var context = [c.Target, c.Distractor1, c.Distractor2, c.Distractor3];
    var target = context[0];
    var modelOutput = speakerModel(target, context, params, globalConfig);
    // compute log likelihood (score) of data point under model
    console.log(modelOutput);
    console.log(c.coarseGrainedSketchInfo);
    console.log(modelOutput.score(c.coarseGrainedSketchInfo));
    return memo + modelOutput.score(c.coarseGrainedSketchInfo);
  }, 0, data);    

  console.log(params);
  console.log(score);

  factor(score);

  var paramsKey = _.values(params).join(',');
  return {
    params : _.zipObject([paramsKey], [score])
  };
};

var outputERP = Infer({method:'enumerate', model: modelAnalysis});
refModule.bayesianErpWriter(outputERP, "./bdaOutput/" + globalConfig.outputFileName);
