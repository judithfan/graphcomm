// run using:
// webppl BDA.wppl --require ./refModule/

// Load in experimental data to condition on
var experimentVersion = 'fixedPose'; // 'fixedPose', 'varyingPose', etc
var data = refModule.readCSV("./bdaInput/sketchData_" + experimentVersion + '.csv');
console.log("Loading expt data complete..." + data.length + " data points");

// Cache some properties of model
// Note: when moving to model comparison, can precache for all models...
var similarities = refModule.getSimilarities();
var costs = refModule.getCosts(experimentVersion);
var possibleSketches = refModule.getPossibleSketches(costs);
console.log("Loading model data complete..."
	    + possibleSketches.length + " sketches of " +
	    + _.keys(similarities['strict']).length + " objects." );

// Package into config
var globalConfig = {
  similarities, possibleSketches, costs,
  storePredictives : false,
  outputFileName : 'testing'
};

var modelAnalysis = function() {
  var similarityMetric = uniformDraw(['mid-layer']);
  var speakerModel = uniformDraw(['S1'])//, 'S0', 'combined']);
  
  var params = {
    similarityMetric,
    speakerModel,
    alpha : uniformDraw(_.range(0.5, 10, 0.5)),
    simScale : 1000,//speakerModel === 'S0' ? 1 : uniformDraw(_.range(0.5, 5, 0.5)),
    costWeight : uniformDraw(_.range(0, 1, 0.05))
  };

  var getScore = cache(function(sketch, target, ctx) {
    if(speakerModel === 'S1') {
      return refModule.getS1score(sketch, target, ctx, extend(params, globalConfig));
    } else if(speakerModel === 'S0') {
      return refModule.getS0score(sketch, target, extend(params, globalConfig));
    } else if(speakerModel === 'combined') {
      return refModule.getCombinedScore(sketch, target, ctx, extend(params, globalConfig));
    } else {
      console.error('unknown model:' + speakerModel);
    }
    return score;
  });

  console.log(params);
  
  var score = reduce(function(c, memo) {
    // Extract condition information
    var conditionType = c.condition;
    var context = [c.Target, c.Distractor1, c.Distractor2, c.Distractor3];
    var target = context[0];

    // Store predives
    // if(globalConfig.storePredictives) {
    //   foreach(modelOutput.support(), function(s){
    // 	var key = _.values(c).concat(s);
    // 	var newPair = _.zipObject([key], [Math.exp(modelOutput.score(s))]);
    // 	globalStore.predictives = extend(globalStore.predictives, newPair);
    //   });
    // }
    
    // condition on data
    var score = getScore(c.sketchLabel, target, context);
    // var p = 
    // var score = (params.speakerModel === 'S1' ?
    // 		 refModule.getS1score(c.sketchLabel, target, context, p) :
    // 		 refModule.getS0score(c.sketchLabel, target, p));
    return memo + score;
  }, 0, data);    

  console.log(params);
  console.log(score);

  factor(score);

  var paramsKey = _.values(params).join(',');
  return {predictive: globalStore.predictives, params : _.zipObject([paramsKey], [score])};
};

var outputERP = Infer({method:'enumerate', model: modelAnalysis});

refModule.bayesianErpWriter(outputERP, "./bdaOutput/" + globalConfig.outputFileName);
