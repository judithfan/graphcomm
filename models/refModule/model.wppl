var speakerModel = function(targetObj, context, params, config) {

  // For now ignore cost
  var sketchCost = function(sketch) {
    return config.costs[sketch];
  };

  var similarity = function(sketch, object) {
    return config.similarities[params.perception][object][sketch];
  };
  
  // Sees sketch and selects among objects in context using similarity
  var literalListener = function(sketch, context){
    return Infer({method:'enumerate', model: function(){
      var object = uniformDraw(context);
      factor(params.simScaling * similarity(sketch, object)); 
      return object;
    }});
  };

  // Selects among sketches given raw similarity to target (ignoring context)
  var speaker = function(targetObj, context) {
    var similarities = config.similarities[params.perception];
    return Infer({method:'enumerate', model: function(){
      var sketch = uniformDraw(config.possibleSketches);
      // faster helper function for literalListener(sketch, context).score(targetObj) :
      var inf = (params.pragmatics === 'S1' ? refModule.getL0score(targetObj, sketch, context, params, config) :
		 params.pragmatics === 'S0' ? similarity(sketch, targetObj) :
		 console.error('unknown pragmatics model:' + params.pragmatics));
      var utility = ((1-params.costWeight) * inf
		     + params.costWeight * (1 - sketchCost(sketch)));
      factor(params.alpha * utility);
      return config.conditionLookup[sketch];
    }});
  };

  return speaker(targetObj, context);
};
