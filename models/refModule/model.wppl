var speakerModel = function(targetObj, context, params, config) {

  // For now ignore cost
  var sketchCost = function(sketch) {
    return config.costs[sketch];
  };

  var similarity = function(sketch, object) {
    return (config.similarities[params.perception][object][sketch]);// + 1.000001)/2;
  };

  // Sees sketch and selects among objects in context using similarity
  var literalListener = function(sketch, context){
    return Infer({method:'enumerate', model: function(){
      var object = uniformDraw(context);
      factor(params.simScaling * similarity(sketch, object));
      return object;
    }});
  };

  // Note that informativities are always logs of the thing we care about
  // so that with alpha = 1, you produce sketches directly proportional
  // to their informativity (because factor adds to log space)
  var informativity = function(sketch) {
    var S1_inf = refModule.getL0score(targetObj, sketch, context, params, config);
    var S0_inf = similarity(sketch, targetObj);
    return params.pragWeight * S1_inf  + (1 - params.pragWeight) * S0_inf;
  };

  // Selects among sketches given raw similarity to target (ignoring context)
  var speaker = function(targetObj, context) {
    var similarities = config.similarities[params.perception];
    return Infer({method:'enumerate', model: function(){
      var sketch = uniformDraw(config.possibleSketches);
      var inf = informativity(sketch);
      var costw = params.costWeight;
      var infw = params.infWeight;
      var utility = infw * inf - costw * sketchCost(sketch); // independent informativity weight parameter
      // var utility = ((1 - params.costWeight) * inf
		  //    - params.costWeight * sketchCost(sketch));
      factor(utility);
      return globalConfig.aggregate ? config.conditionLookup[sketch] : sketch;
    }});
  };

  return speaker(targetObj, context);
};
