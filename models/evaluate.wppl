// run using:
// webppl evaluate.wppl --require ./refModule/ -- --paramSetting human_combined_cost --adaptorType human --splitType balancedavg
// webppl evaluate.wppl --require ./refModule/ -- --paramSetting human_combined_cost --adaptorType human --splitType alldata
// webppl evaluate.wppl --require ./refModule/ -- --paramSetting multimodal_fc6_combined_cost --adaptorType multimodal_fc6 --splitType balancedavg

// Load in experimental data to condition on
var experimentVersion = 'fixedPose96'; // 'fixedPose', 'varyingPose', etc
var aggregate = true;
var splitType = argv.splitType;
var adaptorType = argv.adaptorType;
var data = refModule.readCSV('./bdaInput/' + argv.splitType + '/sketchData_fixedPose_' + splitType + '_' + adaptorType + '_pilot2_costOutliersRemoved.csv');
console.log("Loading expt data complete..." + data.length + " data points");

var params = refModule.readCSV('./bdaOutput/' + argv.adaptorType + "_" + argv.splitType + "/flattened/" + argv.paramSetting + '_' + splitType + 'ParamsFlattened.csv');
console.log("Loading params complete..." + params.length + " param settings");

// Cache some properties of model
var splitNum = splitType.slice(-1);
var similarities = refModule.getSimilarities(splitType); // pass which split number you're using, so which similarities to use
var costs = refModule.getCosts(experimentVersion + '-cost_duration-average',splitType);
var conditionLookup = refModule.getConditionLookup(splitType);
var possibleSketches = refModule.getPossibleSketches(data, {aggregate,conditionLookup});
// Package into config
var globalConfig = {
  similarities, possibleSketches, costs, conditionLookup,
  aggregate: true
};

var predictives = foreach(params, function(paramVal) {
  console.log('now on param: ');
  console.log(paramVal);
  var outPath = ['.', 'evaluateOutput', argv.paramSetting, paramVal.id].join('/');
  console.log(outPath);
  var output = map(function(c) {
    var conditionType = c.condition;
    var context = [c.Target, c.Distractor1, c.Distractor2, c.Distractor3];
    var modelOutput = speakerModel(c.Target, context, paramVal, globalConfig);
    return map(function(s){
      return  _.values(c).concat(s).concat(modelOutput.score(s)).join(',');
    }, modelOutput.support());
  }, data);

  refModule.predictiveSupportWriter(_.flatten(output), outPath);
});
