// run using:
// webppl evaluate.wppl --require ./refModule/

// Load in experimental data to condition on
var experimentVersion = 'fixedPose96'; // 'fixedPose', 'varyingPose', etc
var data = refModule.readCSV('./bdaInput/sketchData_fixedPose_splitbycontext_augmented2_pilot2.csv');
console.log("Loading expt data complete..." + data.length + " data points");

// Cache some properties of model
// Note: when moving to model comparison, can precache for all models...
var similarities = refModule.getSimilarities();
var costs = refModule.getCosts(experimentVersion);
var possibleSketches = refModule.getPossibleSketches(data);
console.log("Loading model data complete..."
	    + possibleSketches.length + " sketches of " +
	    // + _.keys(similarities['strict']).length + " objects." );
			+ _.keys(similarities).length + " objects." );

// Package into config
var globalConfig = {
  similarities, possibleSketches, costs,
  outputFileName : 'bestFitting'
};

var paramPrior = function() {
  var perception = 'mid-layer-augmented' // uniformDraw(['mid-layer-augmented','human']);
  var pragmatics = 'S1' // uniformDraw(['S1', 'S0', 'combined']);
  var production = 'cost' // uniformDraw(['cost', 'nocost']);
  return {
    perception, pragmatics, production,
    alpha : 10, //uniformDraw(_.range(0.5, 9, 0.5)),
    simScaling : 4, //(pragmatics === 'S0' ? 1 :
		//uniformDraw(_.range(0.5, 5, 0.5))),
    pragWeight: 1, //(pragmatics == 'S0' ? 0 :
		 //pragmatics == 'S1' ? 1 :
		 //uniformDraw(_.range(0, 1.01, 0.1))),
    costWeight : 0.0 //(production === 'nocost' ? 0 :
		  //uniformDraw(_.range(0, 1.01, 0.1)))
  };
};

var modelAnalysis = function() {

  var params = paramPrior();
  console.log(params);
  var predictives = map(function(c) {
    // Extract condition information
    var conditionType = c.condition;
    var context = [c.Target, c.Distractor1, c.Distractor2, c.Distractor3];
    var target = context[0];
    var modelOutput = speakerModel(target, context, params, globalConfig);
    return map(function(s){
      return  _.values(c).concat(s).concat(modelOutput.score(s)).join(',')
    }, modelOutput.support());
  }, data);

  // console.log(params);
  // console.log(score);

  // factor(score);
  return {
    predictives: _.flatten(predictives) // reduce(function(v, m) {
    //   return extend(m, v);
    // }, {}, _.flatten(predictives))
  };
};

var outputERP = Infer({method:'enumerate', model: modelAnalysis});
refModule.bayesianErpWriter(outputERP, "./bdaOutput/" + globalConfig.outputFileName);
