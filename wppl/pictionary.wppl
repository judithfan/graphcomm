//// Copied over from code by hawkrobe: https://github.com/hawkrobe/Q_and_A/blob/gh-pages/pages/pictionary.md 
//// Modified here by jefan on: 3/20/17 

/// fold:
var drawCurves = function(drawObj, splines){
  var curve = splines[0];
  drawObj.drawSpline(curve[0], curve[1], curve[2], curve[3], curve[4], curve[5]);
  if (splines.length > 1) {
    drawCurves(drawObj, splines.slice(1));
  }
};

var makeSplines = function(n, splines){
  // Add a curve line to the set of curves
  var startX = uniform(10,60);
  var startY = uniform(10,60);
  var midX = uniform(10,60);
  var midY = uniform(10,60);
  var endX = uniform(10,60);
  var endY = uniform(10,60);
  var newSplines = splines.concat([[startX, startY,
                                    midX, midY,
                                    endX, endY]]);
  // Repeat until you have the desired number
  return (n==1) ? newSplines : makeSplines(n-1, newSplines);
};
											    
var possibleGuesses = ["circle", "box"];
///

var splinePrior = function() {
  var numCurves = 4;
  return makeSplines(numCurves, []);
};

var guessPrior = function() {
  return uniformDraw(possibleGuesses);  
};

// tries to draw the sketch that maximizes the raw similarity to the goal object
var literalSketcher = function(goalObj) {
  var targetImg = Draw(70, 70, false);      // Load the target
  loadImage(targetImg, "/Q_and_A/assets/img/" + goalObj + ".png"); 
  return MH(function() {
    var splineParams = splinePrior();       // Sample a set of 1-5 curves
    var generatedImg = Draw(70, 70, true);  // Create a canvas to draw on
    drawCurves(generatedImg, splineParams); // Sketch the sample curves on the canvas
    factor(-targetImg.distance(generatedImg)/1000); // Weight by raw similarity to target
    return splineParams;
  }, 50);
};

var guesser = function(sketch) {
  return Enumerate(function() {
    var guess = guessPrior();
    var targetImg = Draw(70, 70, false);
    loadImage(targetImg, "/Q_and_A/assets/img/" + guess + ".png");
    factor(-targetImg.distance(sketch)/1000);
    return guess;
  });
};

var pragmaticSketcher = function(goalObj) {
  return MH(function() {
    var splineParams = splinePrior();       // Sample a set of 1-5 curves
    var generatedImg = Draw(70, 70, true);  // Create a canvas to draw on
    drawCurves(generatedImg, splineParams); // Sketch the sample curves on the canvas
    var guessERP = guesser(generatedImg);    // Query the *GUESSER* to get the likelihood 
    factor(guessERP.score([], goalObj));
    return splineParams;
  }, 500);
};

// Plot best sketch
var bestSplineParams = MAP(pragmaticSketcher("box")).val;
var generatedImg = Draw(70, 70, true);
var generatedImg = Draw(70, 70, true);
drawCurves(generatedImg, bestSplineParams);


/////////////======================================================================

///fold:
var drawCurves = function(drawObj, splines){
  var curve = splines[0];
  drawObj.drawSpline(curve[0], curve[1], curve[2], curve[3], curve[4], curve[5]);
  if (splines.length > 1) {
    drawCurves(drawObj, splines.slice(1));
  }
};

var makeSplines = function(n, splines){
  // Add a curve line to the set of curves
  var startX = uniform(10,60);
  var startY = uniform(10,60);
  var midX = uniform(10,60);
  var midY = uniform(10,60);
  var endX = uniform(10,60);
  var endY = uniform(10,60);
  var newSplines = splines.concat([[startX, startY,
                                    midX, midY,
                                    endX, endY]]);
  // Repeat until you have the desired number
  return (n==1) ? newSplines : makeSplines(n-1, newSplines);
};
                          
var possibleGuesses = ["snake", "elephant","lobster","couch","teapot","giraffe","harp","bell","train","motorbike","spoon","dolphin","fish","duck","hat","rabbit","helicopter","ladder","laptop","mouse (animal)","tiger","violin","bicycle","trumpet","shark","kangaroo","crab","cow","fork","pineapple","airplane","pig","van","mosquito","zebra","truck","hammer","bus","floor lamp","pear","seagull","guitar","table","crocodile","palm tree","frying-pan","cat","race car","suv","chair","cactus","socks","blimp","swan","horse","bed","shoe","sheep","ship","microphone","banana","tablelamp","bench","shovel"];

var splinePrior = function() {
  var numCurves = 4;
  return makeSplines(numCurves, []);
};

var guessPrior = function() {
  return uniformDraw(possibleGuesses);  
};


///

// tries to draw the sketch that maximizes the raw similarity to the goal object
var literalSketcher = function(goalObj) {
  return MH(function() {
    var splineParams = splinePrior();       // Sample a set of 1-5 curves
    var generatedImg = Draw(70, 70, true);  // Create a canvas to draw on
    drawCurves(generatedImg, splineParams); // Sketch the sample curves on the canvas
    var guesses = getGuesses(generatedImg); // Query the CNN to get the raw similarity score
    factor(guesses[goalObj]);               // Weight the sample based on score
    return splineParams;
  }, 50);
};

var guesser = function(sketch) {
  var possibleGuesses = getGuesses(sketch);
  return Enumerate(function() {
    var guess = guessPrior();
    factor(possibleGuesses[guess]);
    return guess;
  });
};

var pragmaticSketcher = function(goalObj) {
  return MH(function() {
    var splineParams = splinePrior();       // Sample a set of 1-5 curves
    var generatedImg = Draw(70, 70, true);  // Create a canvas to draw on
    drawCurves(generatedImg, splineParams); // Sketch the sample curves on the canvas
    var guessERP = guesser(generatedImg);    // Query the *GUESSER* to get the likelihood 
    factor(guessERP.score([], goalObj));
    return splineParams;
  }, 500);
};

// Plot best sketch
var bestSplineParams = MAP(pragmaticSketcher("giraffe")).val;
var generatedImg = Draw(70, 70, true);
var generatedImg = Draw(70, 70, true);
drawCurves(generatedImg, bestSplineParams);